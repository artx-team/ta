name: cmake

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-22.04
        build_type:
          - Debug
          - Release
        cc:
          - gcc
          - clang

    steps:
    - uses: actions/checkout@v3

    - name: Prepare
      run: sudo apt-get update && sudo apt-get install libcunit1-dev

    - name: CMake
      run: CC=${{ matrix.cc }} cmake . -Bbuild -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTING=ON

    - name: Build
      run: cmake --build build --target ta

    - name: Test
      run: cmake --build build --target check

  alpine:
    runs-on: ubuntu-22.04
    container:
      image: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - alpine:edge
          - alpine:latest
        build_type:
          - Debug
          - Release
        cc:
          - gcc
          - clang

    steps:
    - uses: actions/checkout@v3

    - name: Prepare
      run: apk --no-cache add build-base cmake cunit-dev ${{ matrix.cc }}

    - name: CMake
      run: CC=${{ matrix.cc }} cmake . -Bbuild -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTING=ON

    - name: Build
      run: cmake --build build --target ta

    - name: Test
      run: cmake --build build --target check

  macos:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - macos-12
        build_type:
          - Debug
          - Release
        cc:
          - clang

    steps:
    - uses: actions/checkout@v3

    - name: Prepare
      run: brew install cunit

    - name: CMake
      run: CC=${{ matrix.cc }} cmake . -Bbuild -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTING=ON

    - name: Build
      run: cmake --build build --target ta

    - name: Test
      run: cmake --build build --target check

  valgrind:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Prepare
      run: sudo apt-get update && sudo apt-get install libcunit1-dev valgrind

    - name: CMake
      run: cmake . -Bbuild -DCMAKE_BUILD_TYPE=FullDebug -DBUILD_TESTING=ON -DENABLE_VALGRIND=ON

    - name: Build
      run: cmake --build build --target ta

    - name: Test
      run: cmake --build build --target check

  analyzer:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Prepare
      run: sudo apt-get update && sudo apt-get install libcunit1-dev

    - name: CMake
      run: cmake . -Bbuild -DCMAKE_BUILD_TYPE=FullDebug -DBUILD_TESTING=ON -DENABLE_ANALYZER=ON

    - name: Build
      run: cmake --build build --target ta

    - name: Test
      run: cmake --build build --target check

  coverage:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Prepare
      run: sudo apt-get update && sudo apt-get install libcunit1-dev

    - name: CodeCov
      run: |
        cmake . -Bbuild -DCMAKE_BUILD_TYPE=FullDebug -DBUILD_TESTING=ON -DENABLE_COVERAGE=ON
        cmake --build build --target ta
        cmake --build build --target check
        bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
